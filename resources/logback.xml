<?xml version="1.0" encoding="UTF-8" ?>

<!-- 根节点<configuration>包含的属性：
	scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
	scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
	debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。	
 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

	<!-- 获取时间戳字符串：<timestamp>:两个属性 key:标识此<timestamp> 的名字；datePattern：设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循java.txt.SimpleDateFormat的格式。 例如将解析配置文件的时间作为上下文名称： -->
	<timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss"/>
	<!-- 设置变量： <property>:用来定义变量值的标签，<property> 有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。通过<property>定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。例如使用<property>定义上下文名称，然后在<contentName>设置logger上下文时使用。 -->
	<property name="APP_Name" value="loser" />   
	<!-- 设置上下文名称：<contextName>:每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。 -->
    <contextName>${APP_Name}</contextName>  
    
	<jmxConfigurator />
	
	<!-- 根节点<configuration>的子节点：appender、logger、root
		<appender>是<configuration>的子节点，是负责写日志的组件。
		<appender>有两个必要属性name和class。name指定appender名称，class指定appender的全限定名
	 -->
	<!-- 1.ConsoleAppender:把日志添加到控制台，有以下子节点：
		<encoder>：对日志进行格式化。
		<target>：字符串 System.out 或者 System.err ，默认 System.out ；
	 -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">  
	    <encoder>  
	     	<pattern>%d [%thread] %-5level %logger{36} - %msg%n</pattern>
	     	<!--
	    	<pattern>%-4relative [%thread] %-5level %logger{35} - %msg %n</pattern>  
	   		-->
	    </encoder>  
  	</appender>
	
	<!-- 文件输出日志 (文件大小策略进行文件输出，超过指定大小对文件备份)-->
	<!-- 2.FileAppender:把日志添加到文件，有以下子节点：
		<file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。
		<append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。
		<encoder>：对记录事件进行格式化。
		<prudent>：如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。
	 -->
	<!-- 3.RollingFileAppender:滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点：
	 	<file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。
		<append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。
		<encoder>：对记录事件进行格式化。（具体参数稍后讲解 ）
		<rollingPolicy>:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。
		<triggeringPolicy >: 告知 RollingFileAppender 合适激活滚动。
		<prudent>：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空。
	-->
	<!-- rollingPolicy:TimeBasedRollingPolicy、FixedWindowRollingPolicy
		TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。有以下子节点
			例如：每天生成一个日志文件，保存30天的日志文件。
			<fileNamePattern>logFile.%d{yyyy-MM-dd}.log</fileNamePattern> ：必要节点，包含文件名及“%d”转换符
			<maxHistory>30</maxHistory> :可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件(%d{yyyy-MM-dd}:30天 ， %d{yyyy-MM}：30个月)
		FixedWindowRollingPolicy： 根据固定窗口算法重命名文件的滚动策略。有以下子节点：
			例如：按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志
			<minIndex>1</minIndex> :窗口索引最小值
			<maxIndex>3</maxIndex> :窗口索引最大值，当用户指定的窗口过大时，会自动将窗口设置为12。
			<fileNamePattern>tests.%i.log.zip</fileNamePattern> 
			必须包含“%i”例如，假设最小值和最大值分别为1和2，命名模式为 mylog%i.log,会产生归档文件mylog1.log和mylog2.log。还可以指定文件压缩选项，例如，mylog%i.log.gz 或者 没有log%i.log.zip	
	 -->
	<!-- triggeringPolicy:
 		 SizeBasedTriggeringPolicy： 查看当前活动文件的大小，如果超过指定大小会告知
 		 RollingFileAppender 触发当前活动文件滚动。
 		   只有一个节点:
		 <maxFileSize>:这是活动文件的大小，默认值是10MB。 
	-->
	<!-- <encoder>：负责两件事，一是把日志信息转换成字节数组，二是把字节数组写入到输出流。
		目前PatternLayoutEncoder 是唯一有用的且默认的encoder ，有一个<pattern>节点，用来设置日志的输入格式。使用“%”加“转换符”方式，如果要输出“%”，则必须用“\”对“\%”进行转义。
		<pattern>里面的转换符说明：参考http://aub.iteye.com/blog/1103685
	 -->
	<!--  <filter>过滤器参考：http://aub.iteye.com/blog/1110008 -->
	<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
	    <File>logs/testFile.log</File>
	    <append>true</append>
	    <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
		    <fileNamePattern>testFile.%i.log.zip</fileNamePattern>
		    <MinIndex>1</MinIndex>
		    <MaxIndex>12</MaxIndex>
	    </rollingPolicy>
	    <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
	    	<MaxFileSize>100MB</MaxFileSize>
	    </triggeringPolicy>
	    <encoder>   
	    	<!-- %-4relative 表示，将输出从程序启动到创建日志记录的时间 进行左对齐 且最小宽度为4。 -->
	    	<pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>   
	    </encoder>
	</appender>
	
	<!--设置loger：用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<loger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。
		name:用来指定受此loger约束的某一个包或者具体的某一个类。
		level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
			还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。
		addtivity:是否向上级loger传递打印信息。默认是true(传递)
		<loger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。
	 -->
	<!-- <logger name="test" />将控制test包下的所有类的日志的打印，但是并没用设置打印级别，所以继承他的上级<root>的日志级别“ERROR”；没有设置addtivity，默认为true，将此loger的打印信息向上级传递；没有设置appender，此loger本身不打印任何信息。 -->
	<logger name="test"/>  
	<!-- 控制test.service包的日志打印，打印级别为“INFO”；additivity属性为false，表示此loger的打印信息不再向上级传递，指定了名字为“STDOUT”的appender。 -->
	<!-- 如果将additivity改为true,则logger本身打印一次，root接到后又会打印一次 -->
	<logger name="test.service" level="INFO" additivity="false">
	    <level value="INFO" />
	    <appender-ref ref="STDOUT" />
	    <appender-ref ref="FILE" />
	</logger>
	<logger name="test.controller" level="INFO" additivity="false">
	    <level value="INFO" />
	    <appender-ref ref="STDOUT" />
	    <appender-ref ref="FILE" />
	</logger>
	<root level="ERROR">             
   		<appender-ref ref="STDOUT" />   
  	</root>  

</configuration>