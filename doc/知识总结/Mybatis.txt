参考文档：http://mybatis.github.io/generator/project-reports.html

1. 由于手写映射文件很容易出错，所以可利用MyBatis生成器自动生成【实体类】、【DAO接口】和【Mapping映射文件】
	所需jar包：
		mybatis-3.2.1.jar
		mybatis-generator-core-1.3.2.jar
		ojdbc6.jar
	配置文件：
		generatorConfig.xml
	执行脚本：
		打开控制台，进入lib目录下：cd E:\GitHub\loser\webapp\WEB-INF\lib
		java -jar mybatis-generator-core-1.3.2.jar -configfile ../classes/generatorConfig.xml -overwrite
		
2. 配置文件优化
	1）配置Mybatis Generator不要生成Example类:
		在<table>标签中添加属性，见配置文件。
		schema即为数据库名, tableName为对应的数据库表, domainObjectName是要生成的实体类, 
		如果想要mapper配置文件加入sql的where条件查询, 可以将enableCountByExample等设为true, 
		这样就会生成一个对应domainObjectName的Example类, enableCountByExample等设为false时, 
		就不会生成对应的Example类了. 
	2）自动生成的文件都是以Mapper结尾，如何修改
	3)去掉注释：
		<commentGenerator> 
    		<property name="suppressAllComments" value="true" /> 
 		</commentGenerator>
 
 3. 手动创建service接口和实现类
 
 4. service中注入dao,使用mybatis进行数据处理的四种方式
 	1)SqlSessionTemplate  这个需要写配置文件，在实现类中注入sqlsession，再使用sqlsession,是细颗粒控制
	2)SqlSessionDaoSupport   这个只需要在实现类中继承特殊类就可以使用sqlsession
	3)MapperFactoryBean  这个要写配置文件，把对应的所有接口在配置文件中引用即可，无需写实现类
	4)MapperScannerConfigurer  这个要写配置文件，只要给出接口所在的包即可，会自动把包中的接口引入，无需写实现类
	
	暂时使用第4）种MapperScannerConfigurer
	1.写配置文件,配置包名将自动引入包中的所有接口
		<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
			<property name="basePackage" value="test.dao" />
			<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		</bean>
	2.在业务层可直接注入DAO接口操作，注入时使用的是接口名，其首字母小写
	3.注意：如果有别的实现类，其提供的名称如果是接口名，且首字母小写，则会在启动时出现冲突错误
	
 
		